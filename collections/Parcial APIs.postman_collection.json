{
	"info": {
		"_postman_id": "e684824d-8edc-4312-b23e-1e20a3bdfc4d",
		"name": "Parcial APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30522001",
		"_collection_link": "https://solar-capsule-244118.postman.co/workspace/My-Workspace~ba110287-56dc-4ce5-8365-eb1bbea793e2/collection/30522001-e684824d-8edc-4312-b23e-1e20a3bdfc4d?action=share&source=collection_link&creator=30522001"
	},
	"item": [
		{
			"name": "Aerolineas",
			"item": [
				{
					"name": "Crear aerolinea valida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Aerolinea debe tener un nombre\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.nombre).to.eql(\"Avianca\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Avianca\",\r\n  \"descripcion\": \"Aerolínea colombiana\",\r\n  \"fechaFundacion\": \"2025-05-15\",\r\n  \"paginaWeb\": \"https://avianca.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aerolineas",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear aerolinea invalida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 412\", function () {\r",
									"   pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"pm.test(\"mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The foundation date must be in the past\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Aerolinea invalida\",\r\n  \"descripcion\": \"Descripcion\",\r\n  \"fechaFundacion\": \"2080-01-01\",\r\n  \"paginaWeb\": \"www.url.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aerolineas",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todas las Aerolineas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Numero de aerolineas > 0', function () {\r",
									"   var data = pm.response.json()\r",
									"   pm.expect(data.length).to.greaterThan(0)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener una aerolinea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Es codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL1ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL1ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener una aerolinea con id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The airline with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar una aerolinea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Viva Air\",\r\n    \"descripcion\": \"Aerolínea colombiana con baja trayectoria\",\r\n    \"fechaFundacion\": \"2019-12-05\",\r\n    \"paginaWeb\": \"www.vivaair.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL1ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL1ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar una aerolinea con id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The airline with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Viva Air\",\r\n    \"descripcion\": \"Aerolínea colombiana Nueva en el mercado\",\r\n    \"fechaFundacion\": \"2019-12-05\",\r\n    \"paginaWeb\": \"www.vivaair.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aerolineas/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar una aerolinea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 204\", function () {\r",
									"   pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL1ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL1ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar una aerolinea con id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The airline with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Aeropuertos",
			"item": [
				{
					"name": "Crear aeropuerto valido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Aerolinea debe tener un nombre\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.nombre).to.eql(\"Olaya Herrera\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Olaya Herrera\",\r\n  \"codigo\": \"OLY\",\r\n  \"pais\": \"Colombia\",\r\n  \"ciudad\": \"Medellín\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aeropuertos",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear aeropuerto invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 412\", function () {\r",
									"   pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"pm.test(\"mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The airport code must have exactly three characters\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"J.F. Kennedy\",\r\n  \"codigo\": \"JF\",\r\n  \"pais\": \"USA\",\r\n  \"ciudad\": \"New York\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aeropuertos",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todos los aeropuertos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Numero de aeropuertos > 0', function () {\r",
									"   var data = pm.response.json()\r",
									"   pm.expect(data.length).to.greaterThan(0)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aeropuertos",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un aeropuerto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Es codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aeropuertos/{{AIRP1ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos",
								"{{AIRP1ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un aeropuerto con id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aeropuertos/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos",
								"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar un aeropuerto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Olaya Herrera reformado\",\r\n  \"codigo\": \"OLY\",\r\n  \"pais\": \"Colombia\",\r\n  \"ciudad\": \"Medellín\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aeropuertos/{{AIRP1ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos",
								"{{AIRP1ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar un aeropuerto con id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Olaya Herrera reformado\",\r\n  \"codigo\": \"OLY\",\r\n  \"pais\": \"Colombia\",\r\n  \"ciudad\": \"Medellín\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aeropuertos/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos",
								"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un aeropuerto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 204\", function () {\r",
									"   pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aeropuertos/{{AIRP1ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos",
								"{{AIRP1ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un aeropuerto con id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"The airport with the given id was not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aeropuertos/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aeropuertos",
								"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AerolineaAeropuertos",
			"item": [
				{
					"name": "Asociar un aeropuerto a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 201\", function () {\r",
									"   pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Avianca\",\r\n  \"descripcion\": \"Aerolínea colombiana\",\r\n  \"fechaFundacion\": \"2025-05-15\",\r\n  \"paginaWeb\": \"https://avianca.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos/{{AIRP2ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos",
								"{{AIRP2ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Asociar un aeropuerto que no existe a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"El aeropuerto con el id proporcionado no existe\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Aerolinea invalida\",\r\n  \"descripcion\": \"Descripcion\",\r\n  \"fechaFundacion\": \"2080-01-01\",\r\n  \"paginaWeb\": \"www.url.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos",
								"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbb0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener todos los aeropuertos que cubre una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Numero de aeropuertos > 0', function () {\r",
									"   var data = pm.response.json()\r",
									"   pm.expect(data.length).to.greaterThan(0)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un aeropuerto asociado a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Es codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos/{{AIRP2ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos",
								"{{AIRP2ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtener un aeropuerto que no esté asociado a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"El aeropuerto no está asociado a la aerolínea\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos/{{AIRP3ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos",
								"{{AIRP3ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar los aeropuertos que están asociados a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  { \"id\": \"{{AIRP3ID}}\" },\r\n  { \"id\": \"{{AIRP2ID}}\" }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar los aeropuertos asociados a una aerolínea, con un aeropuerto inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"El aeropuerto con el id proporcionado no existe\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": \"11111111-1111-1111-1111-111111111110\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un aeropuerto previamente asociado a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 204\", function () {\r",
									"   pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos/{{AIRP2ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos",
								"{{AIRP2ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar un aeropuerto que no estaba previamente asociado a una aerolínea",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El codigo esperado es 404\", function () {\r",
									"   pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de error esperado\", function () {\r",
									"   var data = pm.response.json();\r",
									"   pm.expect(data.message).to.eql(\"El aeropuerto no está asociado a la aerolínea\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PATH}}/aerolineas/{{AIRL2ID}}/aeropuertos/{{AIRP2ID}}",
							"host": [
								"{{PATH}}"
							],
							"path": [
								"aerolineas",
								"{{AIRL2ID}}",
								"aeropuertos",
								"{{AIRP2ID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PATH",
			"value": "http://localhost:3000/api/v1",
			"type": "default"
		},
		{
			"key": "AIRL1ID",
			"value": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
			"type": "string"
		},
		{
			"key": "AIRL2ID",
			"value": "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
			"type": "string"
		},
		{
			"key": "AIRP1ID",
			"value": "11111111-1111-1111-1111-111111111111",
			"type": "string"
		},
		{
			"key": "AIRP2ID",
			"value": "22222222-2222-2222-2222-222222222222",
			"type": "string"
		},
		{
			"key": "AIRP3ID",
			"value": "33333333-3333-3333-3333-333333333333",
			"type": "string"
		}
	]
}